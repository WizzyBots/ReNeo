"""Utilities for using common emojis without polluting the source"""
import logging

logger = logging.getLogger(__name__)

emoji_map = {
    "YES": "‚úÖ‚úî‚òë",
    "NO": "‚ùé‚ùå",
    "SUCCESS": "‚úÖ",
    "FAILURE": "‚ùé",
    "SMILE": "üòÄüòÅüòÑüòäüôÇ",
    "SAD": "‚òπüòûüòîüò¢üòüüòñüò≠",
    "UP": "üëÜ‚òùüÜôüëç‚¨Üüîùüîº",
    "DOWN": "üëáüëé‚è¨‚¨áüîΩ",
    "THUMBS_UP": "üëç",
    "THUMBS_DOWN": "üëé",
    "+1": "üëç",
    "-1": "üëé",
    "STOP": "ü§ö‚úã",
    "STONKS_UP": "üìàüíπ",
    "STONKS_DOWN": "üìâ",
    "ILLUMINATI": "üëΩüëæ",
    "NSFW": "üîûüö´",
    "DENIED": "üö´",
    "IMP": "‚ùó‚ùï‚ö†‚Äº",
    "CAUTION": "‚ö†",
    "FAST": ("üöóüí®", "üèÉüí®"),
    "PUZZLED": "üòï"
}

def get_emoji(emoji: str, degree: int = 0) -> str:
    """Gets an emoji

    Parameters
    ----------
    emoji : int
        The name of the emoji
    degree : Optional[int]
        The degree of choice, 0th emojis are recommended, by default 0

    Returns
    -------
    str
        The emoji, An empty string if not found.
    """
    try:
        res = emoji_map[emoji][degree] # type: str
    except IndexError:
        # Try to be cyclic
        res = emoji_map[emoji][(degree % len(emoji_map[emoji]))]
        # logging because obviously this is a mistake in the code
        logger.info(f"‚ùó | Degree {degree} for emoji {emoji} not available")
    except KeyError:
        logger.exception(f"‚ùó | Emoji {emoji} not found!")
        res = ""
    return res
